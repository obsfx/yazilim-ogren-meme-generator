[{"/home/obsfx/yazilim-ogren-meme-generator/src/index.tsx":"1","/home/obsfx/yazilim-ogren-meme-generator/src/reportWebVitals.ts":"2","/home/obsfx/yazilim-ogren-meme-generator/src/App.tsx":"3"},{"size":500,"mtime":1610470488624,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1610470488624,"results":"6","hashOfConfig":"5"},{"size":3626,"mtime":1610472341778,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"zc5flx",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/obsfx/yazilim-ogren-meme-generator/src/index.tsx",[],["16","17"],"/home/obsfx/yazilim-ogren-meme-generator/src/reportWebVitals.ts",[],"/home/obsfx/yazilim-ogren-meme-generator/src/App.tsx",["18"],"import { useState, useEffect, useRef } from 'react';\nimport Url from 'url-parse';\nimport random from 'random';\nimport './App.css';\n\nconst url: Url = new Url(window.location.href, true);\nconst username: string = url.query.to && url.query.to !== '' ?\nurl.query.to :\n'';\n\nfunction App() {\n  const [ loading, setLoading ] = useState(true);\n  const [ curPainter, setCurPainter ] = useState(0);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const painters: string[] = [ \n    'Francisco Goya',\n    'Rembrandt van Rijn',\n  ];\n\n  const getData = async () => {\n    setLoading(true);\n    const url: string = `https://openaccess-api.clevelandart.org/api/artworks/?artists=${encodeURIComponent(painters[curPainter])}&has_image=1`;\n\n    const res: Response = await fetch(url);\n    const json = await res.json();\n    const dataLen = json.data.length;\n\n    const randdata = json.data[random.int(0, dataLen - 1)]; \n\n    const imgurl = randdata?.images?.web.url;\n    const width = randdata?.images?.web.width;\n    const height = randdata?.images?.web.height;\n\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (!ctx) return null;\n\n      const img = new Image();\n      img.src = imgurl;\n\n      const text: string[] = username === '' ? [\n        'YAZILIM ÖĞRENİN',\n        'YAZILIM İŞİNDE/PARA VAR',\n        'PYTHON ÖĞREN/GELİŞTİR KENDİNİ',\n        'YAZILIM ÖĞRENSEN/İYİ OLUR',\n        'GELECEK YAZILIMDA/ÖĞRENMEK LAZIM',\n        'YAZILIM TAMAM DA/ROBOTİK DE ÖNEMLİ',\n        `${new Date().getFullYear() + 1}/MOBİLİN YILI OLACAK`\n      ] : [\n        `${username}/YAZILIM ÖĞREN`,\n        `${username} YAZILIM İŞİNDE/PARA VAR`,\n        `${username} PYTHON ÖĞREN/GELİŞTİR KENDİNİ`,\n        `${username} YAZILIM ÖĞRENSEN/İYİ OLUR`,\n        `${username} GELECEK YAZILIMDA/ÖĞRENMEK LAZIM`,\n        `${username} YAZILIM TAMAM DA/ROBOTİK DE ÖNEMLİ`\n      ]\n\n      const t = text[random.int(0, text.length - 1)];\n\n      const top = t.split('/')[0].trim();\n      const bottom = t.split('/')[1]?.trim() || '';\n\n      img.onload = () => {\n        canvas.width = width;\n        canvas.height = height;\n        ctx.fillStyle = '#000';\n        ctx.fillRect(0, 0, width, height);\n\n        ctx.drawImage(img, 0, 0);\n\n        ctx.font = `bold ${Math.floor(width * 1.2 / Math.max(top.length, bottom.length))}px Helvetica`;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n        ctx.shadowColor = 'rgba(0, 0, 0, 1)';\n        ctx.shadowBlur = 5;\n        ctx.fillStyle= '#FFF';\n\n        ctx.fillText(top, (width - ctx.measureText(top).width) / 2, 80);\n        ctx.fillText(bottom, (width - ctx.measureText(bottom).width) / 2, height - 20);\n\n        setLoading(false);\n      } \n    }\n\n    console.log(`${painters[curPainter]} yazılım öğrenmeni öğütlüyor`);\n    setCurPainter(prev => (prev + 1) % painters.length);\n  }\n\n  useEffect(() => {\n    console.log('buraya bakma burda bişi yok ---> yazılım öğren -> 1');\n    random.use(Date.now().toString());\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Yazılım Öğren Meme Generator</h1>\n      <div style={{ width: 600, border: '5px solid #222', padding: 5, marginLeft: 'auto', marginRight: 'auto', marginTop: 30 }}>\n\n        <div className='btn' onClick={getData}>⟲ Generate </div>\n\n        {\n          loading && <div>Yazılım Öğreniyoruz Bekle İki Dakika...</div> \n        }\n\n        <canvas style={{ maxWidth: '100%', display: loading ? 'none' : 'initial' }} ref={canvasRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":97,"column":6,"nodeType":"25","endLine":97,"endColumn":8,"suggestions":"26"},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["29"],"no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: [getData]",{"range":"32","text":"33"},[3025,3027],"[getData]"]