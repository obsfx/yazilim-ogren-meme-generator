{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["url","Url","window","location","href","username","query","to","App","useState","loading","setLoading","curPainter","setCurPainter","canvasRef","useRef","painters","getData","a","encodeURIComponent","fetch","res","json","dataLen","data","length","randdata","random","int","imgurl","images","web","width","height","current","canvas","ctx","getContext","img","Image","src","text","Date","getFullYear","t","top","split","trim","bottom","onload","fillStyle","fillRect","drawImage","font","Math","floor","max","shadowOffsetX","shadowOffsetY","shadowColor","shadowBlur","fillText","measureText","console","log","prev","useEffect","use","now","toString","className","style","border","padding","marginLeft","marginRight","marginTop","onClick","maxWidth","display","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c0ac9f6.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport Url from 'url-parse';\nimport random from 'random';\nimport './App.css';\n\nconst url: Url = new Url(window.location.href, true);\nconst username: string = url.query.to && url.query.to !== '' ?\nurl.query.to :\n'';\n\nfunction App() {\n  const [ loading, setLoading ] = useState(true);\n  const [ curPainter, setCurPainter ] = useState(0);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const painters: string[] = [ \n    'Francisco Goya',\n    'Rembrandt van Rijn',\n  ];\n\n  const getData = async () => {\n    setLoading(true);\n    const url: string = `https://openaccess-api.clevelandart.org/api/artworks/?artists=${encodeURIComponent(painters[curPainter])}&has_image=1`;\n\n    const res: Response = await fetch(url);\n    const json = await res.json();\n    const dataLen = json.data.length;\n\n    const randdata = json.data[random.int(0, dataLen - 1)]; \n\n    const imgurl = randdata?.images?.web.url;\n    const width = randdata?.images?.web.width;\n    const height = randdata?.images?.web.height;\n\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (!ctx) return null;\n\n      const img = new Image();\n      img.src = imgurl;\n\n      const text: string[] = username === '' ? [\n        'YAZILIM ÖĞRENİN',\n        'YAZILIM İŞİNDE/PARA VAR',\n        'PYTHON ÖĞREN/GELİŞTİR KENDİNİ',\n        'YAZILIM ÖĞRENSEN/İYİ OLUR',\n        'GELECEK YAZILIMDA/ÖĞRENMEK LAZIM',\n        'YAZILIM TAMAM DA/ROBOTİK DE ÖNEMLİ',\n        `${new Date().getFullYear() + 1}/MOBİLİN YILI OLACAK`\n      ] : [\n        `${username}/YAZILIM ÖĞREN`,\n        `${username} YAZILIM İŞİNDE/PARA VAR`,\n        `${username} PYTHON ÖĞREN/GELİŞTİR KENDİNİ`,\n        `${username} YAZILIM ÖĞRENSEN/İYİ OLUR`,\n        `${username} GELECEK YAZILIMDA/ÖĞRENMEK LAZIM`,\n        `${username} YAZILIM TAMAM DA/ROBOTİK DE ÖNEMLİ`\n      ]\n\n      const t = text[random.int(0, text.length - 1)];\n\n      const top = t.split('/')[0].trim();\n      const bottom = t.split('/')[1]?.trim() || '';\n\n      img.onload = () => {\n        canvas.width = width;\n        canvas.height = height;\n        ctx.fillStyle = '#000';\n        ctx.fillRect(0, 0, width, height);\n\n        ctx.drawImage(img, 0, 0);\n\n        ctx.font = `bold ${Math.floor(width * 1.2 / Math.max(top.length, bottom.length))}px Helvetica`;\n        ctx.shadowOffsetX = 2;\n        ctx.shadowOffsetY = 2;\n        ctx.shadowColor = 'rgba(0, 0, 0, 1)';\n        ctx.shadowBlur = 5;\n        ctx.fillStyle= '#FFF';\n\n        ctx.fillText(top, (width - ctx.measureText(top).width) / 2, 80);\n        ctx.fillText(bottom, (width - ctx.measureText(bottom).width) / 2, height - 20);\n\n        setLoading(false);\n      } \n    }\n\n    console.log(`${painters[curPainter]} yazılım öğrenmeni öğütlüyor`);\n    setCurPainter(prev => (prev + 1) % painters.length);\n  }\n\n  useEffect(() => {\n    console.log('buraya bakma burda bişi yok ---> yazılım öğren -> 1');\n    random.use(Date.now().toString());\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Yazılım Öğren Meme Generator</h1>\n      <div style={{ width: 600, border: '5px solid #222', padding: 5, marginLeft: 'auto', marginRight: 'auto', marginTop: 30 }}>\n\n        <div className='btn' onClick={getData}>⟲ Generate </div>\n\n        {\n          loading && <div>Yazılım Öğreniyoruz Bekle İki Dakika...</div> \n        }\n\n        <canvas style={{ maxWidth: '100%', display: loading ? 'none' : 'initial' }} ref={canvasRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}